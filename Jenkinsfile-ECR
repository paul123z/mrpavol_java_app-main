@Library('my-shared-library') _

pipeline{
    agent any  

    environment {
                    def currentDate = new Date().format('yyyyMMdd')
                    def currentTime = new Date().format('HHmmss')
                    def imageTag = "${currentDate}-${currentTime}-${env.BUILD_ID}"
                    ACCESS_KEY = credentials('aws_access_key')
                    SECRET_KEY = credentials ('aws_secret_key')
    }

    parameters{

        
            choice(name: 'action', choices: 'create\ndelete', description: "Choose create/destroy")
            //string(name: 'aws_account_id', description: "AWS account id", defaultValue: "")
            string(name: 'region', description: "name of the ECR region", defaultValue: "eu-central-1")
            string(name: 'ecr_repoName', description: "name of the ECR repository", defaultValue: "pavol12")
            string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: "demo-cluster1")


    }


    stages{

        
        stage('Git Checkout'){
            when{expression{
            params.action == 'create' }}
       
            steps{
                gitCheckout(
                    branch: "master",
                    url: "https://github.com/paul123z/mrpavol_java_app-main.git"
                )
                }
            }


//         stage('Unit Test Maven'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
//                     sh 'mvn test'
//                 }
//                 }
//             }



//         stage('Integration Test Maven'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
//                     sh 'mvn verify -DskipUnitTests'
//                 }
//                 }
//             }



//         stage('Static code analysis: Sonarqube'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{

//                     def sonarqubeCredentialsId = 'sonarqube-api'
//                     statiCodeAnalysis(sonarqubeCredentialsId)
//                 }
//                 }
//             }



//         stage('Quality Gate Status Check: Sonarqube'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{

//                     def sonarqubeCredentialsId = 'sonarqube-api'
//                     QualityGateStatus(sonarqubeCredentialsId)
//                 }
//                 }
//             }



//                     stage('Maven Build: maven'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{

//                     sh 'mvn clean install'
//                 }
//                 }
//             }




//                     stage('Docker Image Build : ECR'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
// withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
//                     dockerBuildECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
// }
//                 }
//                 }
//             }




//                     stage('Docker Image Scan: trivy ECR'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
// withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
//                     dockerImageScanECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
// }
//                 }
//                 }
//             }



//                     stage('Docker Image Push: ECR'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
// withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
//                     dockerImagePushECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
// }
//                 }
//                 }
//             }

            


//                     stage('Docker Image Cleanup: ECR'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
// withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
 


//                     dockerImageCleanupECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
//                     }
//                 }
//                 }
//             }






                    stage('Create EKS Cluster : Terraform'){
   when{expression{
             params.action == 'create'
         }}
            steps{
                script{
                    dir('eks_module'){
                        sh """

                            terraform init
                            terraform plan -var 'access_key=${ACCESS_KEY}' -var 'secret_key=${SECRET_KEY}' -var region='${params.region}' --var-file=./config/terraform.tfvars
                            terraform apply -var 'access_key=${ACCESS_KEY}' -var 'secret_key=${SECRET_KEY}' -var region='${params.region}' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }

                }
                }
            }




                    stage('Connect To EKS Cluster : Terraform'){
    when{expression{
             params.action == 'create'
         }}
            steps{
                script{
                    dir('eks_module'){ 
                        sh """
                        aws --version
                        aws configure set aws_access_key_id ${ACCESS_KEY}
                        aws configure set aws_secret_access_key ${SECRET_KEY}
                        aws configure set region ${params.region}
                        aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                        """
                    }

                }
                }
            }





                    stage('Deployment on EKS Cluster'){
    when{expression{
             params.action == 'create'
         }}
            steps{
                script{
//kubectl set image deployment/myjavaapp-deployment myjavaapp=${aws_account_id}.dkr.ecr.eu-central-1.amazonaws.com/pavol12:latest --record

                withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
                    def apply = false

                    try{
                        input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                        apply = true
                    } catch(err){
                        apply = false
                        currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        sh """
                        echo ${aws_account_id}
                        sed -i 's|<aws_account_id>.dkr.ecr.eu-central-1.amazonaws.com/pavol12:latest|${aws_account_id}.dkr.ecr.eu-central-1.amazonaws.com/pavol12:latest|' deployment.yaml
                      
                        kubectl apply -f .
                        """
                    }
                    }                      

                }
                }
            }




        }
    }
