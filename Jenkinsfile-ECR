@Library('my-shared-library') _

pipeline{
    agent any  

    environment {
                    def currentDate = new Date().format('yyyyMMdd')
                    def currentTime = new Date().format('HHmmss')
                    def imageTag = "${currentDate}-${currentTime}-${env.BUILD_ID}"
    }

    parameters{

        
            choice(name: 'action', choices: 'create\ndelete', description: "Choose create/destroy")
            //string(name: 'aws_account_id', description: "AWS account id", defaultValue: "")
            string(name: 'region', description: "name of the ECR region", defaultValue: "eu-central-1")
            string(name: 'ecr_repoName', description: "name of the ECR repository", defaultValue: "pavol12")


    }


    stages{

        
        stage('Git Checkout'){
            when{expression{
            params.action == 'create' }}
       
            steps{
                gitCheckout(
                    branch: "master",
                    url: "https://github.com/paul123z/mrpavol_java_app-main.git"
                )
                }
            }


        stage('Unit Test Maven'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{
                    mvnTest()
                }
                }
            }



        stage('Integration Test Maven'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{
                    mvnIntegrationTest()
                }
                }
            }



        stage('Static code analysis: Sonarqube'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{

                    def sonarqubeCredentialsId = 'sonarqube-api'
                    statiCodeAnalysis(sonarqubeCredentialsId)
                }
                }
            }



        stage('Quality Gate Status Check: Sonarqube'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{

                    def sonarqubeCredentialsId = 'sonarqube-api'
                    QualityGateStatus(sonarqubeCredentialsId)
                }
                }
            }



                    stage('Maven Build: maven'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{

                    mvnBuild()
                }
                }
            }




                    stage('Docker Image Build : ECR'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{
withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
                    dockerBuildECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
}
                }
                }
            }




                    stage('Docker Image Scan: trivy ECR'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{
withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
                    dockerImageScanECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
}
                }
                }
            }



                    stage('Docker Image Push: ECR'){
            when{expression{
            params.action == 'create'
        }}
            steps{
                script{
withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
                    dockerImagePushECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
}
                }
                }
            }

            


//                     stage('Docker Image Cleanup: ECR'){
//             when{expression{
//             params.action == 'create'
//         }}
//             steps{
//                 script{
// withCredentials([string(credentialsId: 'aws_account_id', variable: 'aws_account_id')]) {
 


//                     dockerImageCleanupECR("${aws_account_id}","${params.region}","${params.ecr_repoName}")
//                     }
//                 }
//                 }
//             }






            



        }
    }
